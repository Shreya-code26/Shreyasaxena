Question-1:
package com.demo;
import java.util.Scanner;
//Custom Exception for invalid country
class CountryNotValidException extends Exception {
 public CountryNotValidException(String message) {
     super(message);
 }
}
//Custom Exception for invalid employee name
class EmployeeNameInvalidException extends Exception {
 public EmployeeNameInvalidException(String message) {
     super(message);
 }
}

//Custom Exception for employees not eligible for tax
class TaxNotEligibleException extends Exception {
 public TaxNotEligibleException(String message) {
     super(message);
 }
}

//TaxCalculator class to calculate the tax based on the salary and nationality
class TaxCalculator {
 public double calculateTax(String empName, boolean isIndian, double empSal) 
     throws CountryNotValidException, EmployeeNameInvalidException, TaxNotEligibleException {

     // Check if employee name is valid
     if (empName == null || empName.isEmpty()) {
         throw new EmployeeNameInvalidException("The employee name cannot be empty.");
     }

     // Check if the employee is Indian
     if (!isIndian) {
         throw new CountryNotValidException("The employee should be an Indian citizen for calculating tax");
     }

     // Check the salary range and calculate tax
     double taxAmount = 0;
     if (empSal > 100000) {
         taxAmount = empSal * 0.08; // 8% for salary above 1 lakh
     } else if (empSal >= 50000 && empSal <= 100000) {
         taxAmount = empSal * 0.06; // 6% for salary between 50k and 1 lakh
     } else if (empSal >= 30000 && empSal < 50000) {
         taxAmount = empSal * 0.05; // 5% for salary between 30k and 50k
     } else if (empSal >= 10000 && empSal < 30000) {
         taxAmount = empSal * 0.04; // 4% for salary between 10k and 30k
     } else {
         throw new TaxNotEligibleException("The employee does not need to pay tax");
     }

     return taxAmount;
 }
}

public class CalculatorSimulator {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        TaxCalculator taxCalculator = new TaxCalculator();

        // Test cases
        // Test case 1
        try {
            System.out.println("Test case 1:");
            double tax1 = taxCalculator.calculateTax("Ron", false, 34000);
            System.out.println("Tax amount is " + tax1);
        } catch (CountryNotValidException e) {
            System.out.println("The employee should be an Indian citizen for calculating tax");
            e.printStackTrace();
        } catch (EmployeeNameInvalidException e) {
            System.out.println("The employee name cannot be empty");
            e.printStackTrace();
        } catch (TaxNotEligibleException e) {
            System.out.println("The employee does not need to pay tax");
            e.printStackTrace();
        }

        // Test case 2
        try {
            System.out.println("\nTest case 2:");
            double tax2 = taxCalculator.calculateTax("Tim", true, 1000);
            System.out.println("Tax amount is " + tax2);
        } catch (CountryNotValidException e) {
            System.out.println("The employee should be an Indian citizen for calculating tax");
            e.printStackTrace();
        } catch (EmployeeNameInvalidException e) {
            System.out.println("The employee name cannot be empty");
            e.printStackTrace();
        } catch (TaxNotEligibleException e) {
            System.out.println("The employee does not need to pay tax");
            e.printStackTrace();
        }

        // Test case 3
        try {
            System.out.println("\nTest case 3:");
            double tax3 = taxCalculator.calculateTax("Jack", true, 55000);
            System.out.println("Tax amount is " + tax3);
        } catch (CountryNotValidException e) {
            System.out.println("The employee should be an Indian citizen for calculating tax");
            e.printStackTrace();
        } catch (EmployeeNameInvalidException e) {
            System.out.println("The employee name cannot be empty");
            e.printStackTrace();
        } catch (TaxNotEligibleException e) {
            System.out.println("The employee does not need to pay tax");
            e.printStackTrace();
        }

        // Test case 4
        try {
            System.out.println("\nTest case 4:");
            double tax4 = taxCalculator.calculateTax("", true, 30000);
            System.out.println("Tax amount is " + tax4);
        } catch (CountryNotValidException e) {
            System.out.println("The employee should be an Indian citizen for calculating tax");
            e.printStackTrace();
        } catch (EmployeeNameInvalidException e) {
            System.out.println("The employee name cannot be empty");
            e.printStackTrace();
        } catch (TaxNotEligibleException e) {
            System.out.println("The employee does not need to pay tax");
            e.printStackTrace();
        }

        scanner.close();
    }
}

Output:
Test case 1:
The employee should be an Indian citizen for calculating tax
com.demo.CountryNotValidException: The employee should be an Indian citizen for calculating tax
	at OperatorDemo/com.demo.TaxCalculator.calculateTax(CalculatorSimulator.java:37)
	at OperatorDemo/com.demo.CalculatorSimulator.main(CalculatorSimulator.java:67)

Test case 2:
The employee does not need to pay tax
com.demo.TaxNotEligibleException: The employee does not need to pay tax
	at OperatorDemo/com.demo.TaxCalculator.calculateTax(CalculatorSimulator.java:51)
	at OperatorDemo/com.demo.CalculatorSimulator.main(CalculatorSimulator.java:83)

Test case 3:
Tax amount is 3300.0

Test case 4:
The employee name cannot be empty
com.demo.EmployeeNameInvalidException: The employee name cannot be empty.
	at OperatorDemo/com.demo.TaxCalculator.calculateTax(CalculatorSimulator.java:32)
	at OperatorDemo/com.demo.CalculatorSimulator.main(CalculatorSimulator.java:115)


Question-2:
package com.demo;
public class ArrayExceptionDemo {
    public static void main(String[] args) {
        // Create an array of integers with 3 elements
        int[] numbers = {1, 2, 3};

        try {
            // Attempt to access an index that is out of bounds (index 5, but array has only 3 elements)
            System.out.println("Element at index 5: " + numbers[5]);
        } catch (ArrayIndexOutOfBoundsException e) {
            // Catch the exception and print a message
            System.out.println("Exception caught: " + e);
            System.out.println("ArrayIndexOutOfBoundsException: Trying to access an invalid index.");
        }
    }
}

Output:
Exception caught: java.lang.ArrayIndexOutOfBoundsException: Index 5 out of bounds for length 3
ArrayIndexOutOfBoundsException: Trying to access an invalid index.

